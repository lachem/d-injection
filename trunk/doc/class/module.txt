 Dependency Injection - Header link:../../di/module.hpp[<module.hpp>]
====================================================================


Class module
------------



Synopsis
~~~~~~~~

---------------------------------------------------------------------
namespace di
{
  template<typename M> struct module
  {
    module<M>& use(const typename std::shared_ptr< T > &element);
    module<M>& use(const di::service< T > &element);
    di::smart_ptr<T>::shared_ptr get();
    smart_ptr< di::builder<C> >::single_ptr builder();
    smart_ptr< di::abstract_builder<C> >::single_ptr abstract_builder();
    smart_ptr< di::abstract_builder<I> >::single_ptr abstract_builder();
    smart_ptr< di::generic_builder<C> >::single_ptr generic_builder();
    void build();
    void start();
    void stop();
    void suspend();
    void resume();
  };
}
---------------------------------------------------------------------


Functions
~~~~~~~~~

---------------------------------------------------------------------
module<M>& use(const typename std::shared_ptr< T > &element)
---------------------------------------------------------------------

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
module<M>& use(const di::service< T > &element)
---------------------------------------------------------------------

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
di::smart_ptr<T>::shared_ptr get()
---------------------------------------------------------------------

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
smart_ptr< di::builder<C> >::single_ptr builder()
---------------------------------------------------------------------

Creates a builder preconfigured with applicable services. 

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
smart_ptr< di::abstract_builder<C> >::single_ptr abstract_builder()
---------------------------------------------------------------------

Creates an abstract builder preconfigured with applicable services. 

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
smart_ptr< di::abstract_builder<I> >::single_ptr abstract_builder()
---------------------------------------------------------------------

Creates an abstract builder preconfigured with applicable services. 

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
smart_ptr< di::generic_builder<C> >::single_ptr generic_builder()
---------------------------------------------------------------------

Creates a generic builder preconfigured with applicable services. 

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
void build()
---------------------------------------------------------------------

Implement this function in child module to be called when  is invoked. 

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
void start()
---------------------------------------------------------------------

Implement this function in child module to be called when  is invoked. 

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
void stop()
---------------------------------------------------------------------

Implement this function in child module to be called when  is invoked. 

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
void suspend()
---------------------------------------------------------------------

Implement this function in child module to be called when  is invoked. 

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
void resume()
---------------------------------------------------------------------

Implement this function in child module to be called when  is invoked. 

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +



include::../footer.txt[]
