- [done] change use to set next not already set object of given type
- [done] add replace(int, object) to replace already set object at given position
- [done] use boost::preprocessor or your own macros to generate multiple factories
- [rejected] add support for parametrized constructors in factories - replace with build delegate
- [done] add error handling (exceptions) and static_asserts
- [done] synchronization (the same factory producing at once on different threads)
- [not applicable] replace template<T> use() with preprocessor generated use() methods, that wouldn't need to use for_each and would allow polymorphic builders
- [done] make it possible to use inject<Type> instead of inject<Type,Class> (will be probably less efficient in multi-threading env)
- [done] add delegation
- [done] enable object lifetime control for di::required and di::optional (e.g. di::optional< di::unique<Type> >, di::required< di::shared<Type> >)
- [done] create application object, from which builders could be created
- make it possible to define layers, and determine access rights between them
- [done] create modules which could belong to layers and be parts of application
- [done] change configurable replace method to use method with "at" parameter (needed for partial building)
- add examples to class comments
- injecting POD types
- support for C++11
- builder composition for generic_builder(s) only
- the ability for builders to feed other builders
- dependency cycle detection in di::application
- make di::optional cast to safe bool
