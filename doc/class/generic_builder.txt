 Dependency Injection - Header link:../../di/generic_builder.hpp[<generic_builder.hpp>]
======================================================================================


Class generic_builder
---------------------

Generic Builder is a convient facility to build objects with injections. It does not require the subject to be of any specific type, but to define which injections are to be handled by generic_builder. Therefore using generic_builder< subject<T1,T2> > is perfectly fine. The drawback of generic_builder is that it does not support abstraction i.e. build and build_part methods cannot be mocked nor can build or build_part be used to perform injections through interfaces. 

Synopsis
~~~~~~~~

---------------------------------------------------------------------
namespace di
{
  template<typename S> class generic_builder : public configurable< S >
  {
    void build(C &instance);
    void build_part(C &instance);
    generic_builder<S>& use(U &object);
    generic_builder<S>& use(const SPtr< U > &object);
    generic_builder<S>& replace(U &object, size_t at=0);
    generic_builder<S>& replace(const SPtr< U > &object, size_t at=0);
    generic_builder<S>& remove(size_t at=0);
  };
}
---------------------------------------------------------------------


Functions
~~~~~~~~~

---------------------------------------------------------------------
void build(C &instance)
---------------------------------------------------------------------

Allows building of any object that needs injections specified by generic_builder template type parameter. 







*Requires:* C is a type that contains injections specified by template S  +
*Effects:* none +
*Postconditions:* All injections which where provided to generic_builder are injectied into instance  +
*Returns:* none +
*Throws:*  +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
void build_part(C &instance)
---------------------------------------------------------------------

Allows building part of an object. What follows is that neither requirements are checked nor constructed is called. 






*Requires:* C is a type that contains injections specified by template S  +
*Effects:* none +
*Postconditions:* All injections which where provided to generic_builder are injectied into instance  +
*Returns:* none +
*Throws:*  +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
generic_builder<S>& use(U &object)
---------------------------------------------------------------------




*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
generic_builder<S>& use(const SPtr< U > &object)
---------------------------------------------------------------------




*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
generic_builder<S>& replace(U &object, size_t at=0)
---------------------------------------------------------------------




*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
generic_builder<S>& replace(const SPtr< U > &object, size_t at=0)
---------------------------------------------------------------------




*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +

---------------------------------------------------------------------
generic_builder<S>& remove(size_t at=0)
---------------------------------------------------------------------




*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +



include::../footer.txt[]
