 Dependency Injection - Header link:../../di/application.hpp[<application.hpp>]
==============================================================================


Class application
-----------------

Modules that depend on each other need a way to exchange services. Application enables convinient module handling. The class itself requires a list of module definitions. Each module has to define two lists of services i.e. needed and provided services. Application class derives from list of modules (di::module<M>, where M is perviously mentioned module definition). At instantiation the application object connects each module's provided and required service lists with its own container (where services are held). Each service in the context of a singular application object is required to be represented by one and only one instance. The number of application objects is not limited, though modules that belong to different application objects cannot exchange services. 

Synopsis
~~~~~~~~

---------------------------------------------------------------------
namespace di
{
  template<typename T1, typename T2, ..., template Tn> class application
  {
    application();
  };
}
---------------------------------------------------------------------


Functions
~~~~~~~~~

---------------------------------------------------------------------
application()
---------------------------------------------------------------------

*Requires:* none +
*Effects:* none +
*Postconditions:* none +
*Returns:* none +
*Throws:* none +
*Complexity:* no info +
*Note:* none +
*Danger:* none +
*Rationale:* none +



include::../footer.txt[]
